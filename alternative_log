===========================
ending time is 9
===========================
===== grid size is =====
c, t pairs in the individual c,t group 155
c, t pairs in the full no value t group 324
c, t pairs in the part no value g group 250
sum is 729
the total number of c t paris are 729
Academic license - for non-commercial use only - expires 2023-08-13
Using license file /home/wenbo/gurobi.lic
Changed value of parameter TimeLimit to 900.0
   Prev: inf  Min: 0.0  Max: inf  Default: inf
Changed value of parameter Threads to 1
   Prev: 0  Min: 0  Max: 1024  Default: 0
Changed value of parameter LogFile to sp1_algo2
   Prev:   Default: 
group(k,t) and its component cell(c,t)
((1, 5), 5) : [((1, 5), 5)] 

((2, 4), 5) : [((2, 4), 5)] 

((2, 5), 5) : [((2, 5), 5)] 

((3, 3), 5) : [((3, 3), 5)] 

((3, 4), 5) : [((3, 4), 5)] 

((4, 2), 5) : [((4, 2), 5)] 

((4, 3), 5) : [((4, 3), 5)] 

((5, 1), 5) : [((5, 1), 5)] 

((5, 2), 5) : [((5, 2), 5)] 

((1, 4), 6) : [((1, 4), 6)] 

((1, 5), 6) : [((1, 5), 6)] 

((1, 6), 6) : [((1, 6), 6)] 

((2, 3), 6) : [((2, 3), 6)] 

((2, 4), 6) : [((2, 4), 6)] 

((2, 5), 6) : [((2, 5), 6)] 

((2, 6), 6) : [((2, 6), 6)] 

((3, 2), 6) : [((3, 2), 6)] 

((3, 3), 6) : [((3, 3), 6)] 

((3, 4), 6) : [((3, 4), 6)] 

((3, 5), 6) : [((3, 5), 6)] 

((4, 1), 6) : [((4, 1), 6)] 

((4, 2), 6) : [((4, 2), 6)] 

((4, 3), 6) : [((4, 3), 6)] 

((4, 4), 6) : [((4, 4), 6)] 

((5, 1), 6) : [((5, 1), 6)] 

((5, 2), 6) : [((5, 2), 6)] 

((5, 3), 6) : [((5, 3), 6)] 

((6, 1), 6) : [((6, 1), 6)] 

((6, 2), 6) : [((6, 2), 6)] 

((1, 3), 7) : [((1, 3), 7)] 

((1, 4), 7) : [((1, 4), 7)] 

((1, 5), 7) : [((1, 5), 7)] 

((1, 6), 7) : [((1, 6), 7)] 

((1, 7), 7) : [((1, 7), 7)] 

((2, 2), 7) : [((2, 2), 7)] 

((2, 3), 7) : [((2, 3), 7)] 

((2, 4), 7) : [((2, 4), 7)] 

((2, 5), 7) : [((2, 5), 7)] 

((2, 6), 7) : [((2, 6), 7)] 

((2, 7), 7) : [((2, 7), 7)] 

((3, 1), 7) : [((3, 1), 7)] 

((3, 2), 7) : [((3, 2), 7)] 

((3, 3), 7) : [((3, 3), 7)] 

((3, 4), 7) : [((3, 4), 7)] 

((3, 5), 7) : [((3, 5), 7)] 

((3, 6), 7) : [((3, 6), 7)] 

((4, 1), 7) : [((4, 1), 7)] 

((4, 2), 7) : [((4, 2), 7)] 

((4, 3), 7) : [((4, 3), 7)] 

((4, 4), 7) : [((4, 4), 7)] 

((4, 5), 7) : [((4, 5), 7)] 

((5, 1), 7) : [((5, 1), 7)] 

((5, 2), 7) : [((5, 2), 7)] 

((5, 3), 7) : [((5, 3), 7)] 

((5, 4), 7) : [((5, 4), 7)] 

((6, 1), 7) : [((6, 1), 7)] 

((6, 2), 7) : [((6, 2), 7)] 

((6, 3), 7) : [((6, 3), 7)] 

((7, 1), 7) : [((7, 1), 7)] 

((7, 2), 7) : [((7, 2), 7)] 

((1, 2), 8) : [((1, 2), 8)] 

((1, 3), 8) : [((1, 3), 8)] 

((1, 4), 8) : [((1, 4), 8)] 

((1, 5), 8) : [((1, 5), 8)] 

((1, 6), 8) : [((1, 6), 8)] 

((1, 7), 8) : [((1, 7), 8)] 

((1, 8), 8) : [((1, 8), 8)] 

((2, 1), 8) : [((2, 1), 8)] 

((2, 2), 8) : [((2, 2), 8)] 

((2, 3), 8) : [((2, 3), 8)] 

((2, 4), 8) : [((2, 4), 8)] 

((2, 5), 8) : [((2, 5), 8)] 

((2, 6), 8) : [((2, 6), 8)] 

((2, 7), 8) : [((2, 7), 8)] 

((2, 8), 8) : [((2, 8), 8)] 

((3, 1), 8) : [((3, 1), 8)] 

((3, 2), 8) : [((3, 2), 8)] 

((3, 3), 8) : [((3, 3), 8)] 

((3, 4), 8) : [((3, 4), 8)] 

((3, 5), 8) : [((3, 5), 8)] 

((3, 6), 8) : [((3, 6), 8)] 

((3, 7), 8) : [((3, 7), 8)] 

((4, 1), 8) : [((4, 1), 8)] 

((4, 2), 8) : [((4, 2), 8)] 

((4, 3), 8) : [((4, 3), 8)] 

((4, 4), 8) : [((4, 4), 8)] 

((4, 5), 8) : [((4, 5), 8)] 

((4, 6), 8) : [((4, 6), 8)] 

((5, 1), 8) : [((5, 1), 8)] 

((5, 2), 8) : [((5, 2), 8)] 

((5, 3), 8) : [((5, 3), 8)] 

((5, 4), 8) : [((5, 4), 8)] 

((5, 5), 8) : [((5, 5), 8)] 

((6, 1), 8) : [((6, 1), 8)] 

((6, 2), 8) : [((6, 2), 8)] 

((6, 3), 8) : [((6, 3), 8)] 

((6, 4), 8) : [((6, 4), 8)] 

((7, 1), 8) : [((7, 1), 8)] 

((7, 2), 8) : [((7, 2), 8)] 

((7, 3), 8) : [((7, 3), 8)] 

((8, 1), 8) : [((8, 1), 8)] 

((8, 2), 8) : [((8, 2), 8)] 

((1, 1), 9) : [((1, 1), 9)] 

((1, 2), 9) : [((1, 2), 9)] 

((1, 3), 9) : [((1, 3), 9)] 

((1, 4), 9) : [((1, 4), 9)] 

((1, 5), 9) : [((1, 5), 9)] 

((1, 6), 9) : [((1, 6), 9)] 

((1, 7), 9) : [((1, 7), 9)] 

((1, 8), 9) : [((1, 8), 9)] 

((1, 9), 9) : [((1, 9), 9)] 

((2, 1), 9) : [((2, 1), 9)] 

((2, 2), 9) : [((2, 2), 9)] 

((2, 3), 9) : [((2, 3), 9)] 

((2, 4), 9) : [((2, 4), 9)] 

((2, 5), 9) : [((2, 5), 9)] 

((2, 6), 9) : [((2, 6), 9)] 

((2, 7), 9) : [((2, 7), 9)] 

((2, 8), 9) : [((2, 8), 9)] 

((2, 9), 9) : [((2, 9), 9)] 

((3, 1), 9) : [((3, 1), 9)] 

((3, 2), 9) : [((3, 2), 9)] 

((3, 3), 9) : [((3, 3), 9)] 

((3, 4), 9) : [((3, 4), 9)] 

((3, 5), 9) : [((3, 5), 9)] 

((3, 6), 9) : [((3, 6), 9)] 

((3, 7), 9) : [((3, 7), 9)] 

((3, 8), 9) : [((3, 8), 9)] 

((4, 1), 9) : [((4, 1), 9)] 

((4, 2), 9) : [((4, 2), 9)] 

((4, 3), 9) : [((4, 3), 9)] 

((4, 4), 9) : [((4, 4), 9)] 

((4, 5), 9) : [((4, 5), 9)] 

((4, 6), 9) : [((4, 6), 9)] 

((4, 7), 9) : [((4, 7), 9)] 

((5, 1), 9) : [((5, 1), 9)] 

((5, 2), 9) : [((5, 2), 9)] 

((5, 3), 9) : [((5, 3), 9)] 

((5, 4), 9) : [((5, 4), 9)] 

((5, 5), 9) : [((5, 5), 9)] 

((5, 6), 9) : [((5, 6), 9)] 

((6, 1), 9) : [((6, 1), 9)] 

((6, 2), 9) : [((6, 2), 9)] 

((6, 3), 9) : [((6, 3), 9)] 

((6, 4), 9) : [((6, 4), 9)] 

((6, 5), 9) : [((6, 5), 9)] 

((7, 1), 9) : [((7, 1), 9)] 

((7, 2), 9) : [((7, 2), 9)] 

((7, 3), 9) : [((7, 3), 9)] 

((7, 4), 9) : [((7, 4), 9)] 

((8, 1), 9) : [((8, 1), 9)] 

((8, 2), 9) : [((8, 2), 9)] 

((8, 3), 9) : [((8, 3), 9)] 

((9, 1), 9) : [((9, 1), 9)] 

((9, 2), 9) : [((9, 2), 9)] 

 ===== number of cells per group ===== {((1, 5), 5): 1, ((2, 4), 5): 1, ((2, 5), 5): 1, ((3, 3), 5): 1, ((3, 4), 5): 1, ((4, 2), 5): 1, ((4, 3), 5): 1, ((5, 1), 5): 1, ((5, 2), 5): 1, ((1, 4), 6): 1, ((1, 5), 6): 1, ((1, 6), 6): 1, ((2, 3), 6): 1, ((2, 4), 6): 1, ((2, 5), 6): 1, ((2, 6), 6): 1, ((3, 2), 6): 1, ((3, 3), 6): 1, ((3, 4), 6): 1, ((3, 5), 6): 1, ((4, 1), 6): 1, ((4, 2), 6): 1, ((4, 3), 6): 1, ((4, 4), 6): 1, ((5, 1), 6): 1, ((5, 2), 6): 1, ((5, 3), 6): 1, ((6, 1), 6): 1, ((6, 2), 6): 1, ((1, 3), 7): 1, ((1, 4), 7): 1, ((1, 5), 7): 1, ((1, 6), 7): 1, ((1, 7), 7): 1, ((2, 2), 7): 1, ((2, 3), 7): 1, ((2, 4), 7): 1, ((2, 5), 7): 1, ((2, 6), 7): 1, ((2, 7), 7): 1, ((3, 1), 7): 1, ((3, 2), 7): 1, ((3, 3), 7): 1, ((3, 4), 7): 1, ((3, 5), 7): 1, ((3, 6), 7): 1, ((4, 1), 7): 1, ((4, 2), 7): 1, ((4, 3), 7): 1, ((4, 4), 7): 1, ((4, 5), 7): 1, ((5, 1), 7): 1, ((5, 2), 7): 1, ((5, 3), 7): 1, ((5, 4), 7): 1, ((6, 1), 7): 1, ((6, 2), 7): 1, ((6, 3), 7): 1, ((7, 1), 7): 1, ((7, 2), 7): 1, ((1, 2), 8): 1, ((1, 3), 8): 1, ((1, 4), 8): 1, ((1, 5), 8): 1, ((1, 6), 8): 1, ((1, 7), 8): 1, ((1, 8), 8): 1, ((2, 1), 8): 1, ((2, 2), 8): 1, ((2, 3), 8): 1, ((2, 4), 8): 1, ((2, 5), 8): 1, ((2, 6), 8): 1, ((2, 7), 8): 1, ((2, 8), 8): 1, ((3, 1), 8): 1, ((3, 2), 8): 1, ((3, 3), 8): 1, ((3, 4), 8): 1, ((3, 5), 8): 1, ((3, 6), 8): 1, ((3, 7), 8): 1, ((4, 1), 8): 1, ((4, 2), 8): 1, ((4, 3), 8): 1, ((4, 4), 8): 1, ((4, 5), 8): 1, ((4, 6), 8): 1, ((5, 1), 8): 1, ((5, 2), 8): 1, ((5, 3), 8): 1, ((5, 4), 8): 1, ((5, 5), 8): 1, ((6, 1), 8): 1, ((6, 2), 8): 1, ((6, 3), 8): 1, ((6, 4), 8): 1, ((7, 1), 8): 1, ((7, 2), 8): 1, ((7, 3), 8): 1, ((8, 1), 8): 1, ((8, 2), 8): 1, ((1, 1), 9): 1, ((1, 2), 9): 1, ((1, 3), 9): 1, ((1, 4), 9): 1, ((1, 5), 9): 1, ((1, 6), 9): 1, ((1, 7), 9): 1, ((1, 8), 9): 1, ((1, 9), 9): 1, ((2, 1), 9): 1, ((2, 2), 9): 1, ((2, 3), 9): 1, ((2, 4), 9): 1, ((2, 5), 9): 1, ((2, 6), 9): 1, ((2, 7), 9): 1, ((2, 8), 9): 1, ((2, 9), 9): 1, ((3, 1), 9): 1, ((3, 2), 9): 1, ((3, 3), 9): 1, ((3, 4), 9): 1, ((3, 5), 9): 1, ((3, 6), 9): 1, ((3, 7), 9): 1, ((3, 8), 9): 1, ((4, 1), 9): 1, ((4, 2), 9): 1, ((4, 3), 9): 1, ((4, 4), 9): 1, ((4, 5), 9): 1, ((4, 6), 9): 1, ((4, 7), 9): 1, ((5, 1), 9): 1, ((5, 2), 9): 1, ((5, 3), 9): 1, ((5, 4), 9): 1, ((5, 5), 9): 1, ((5, 6), 9): 1, ((6, 1), 9): 1, ((6, 2), 9): 1, ((6, 3), 9): 1, ((6, 4), 9): 1, ((6, 5), 9): 1, ((7, 1), 9): 1, ((7, 2), 9): 1, ((7, 3), 9): 1, ((7, 4), 9): 1, ((8, 1), 9): 1, ((8, 2), 9): 1, ((8, 3), 9): 1, ((9, 1), 9): 1, ((9, 2), 9): 1}
f(Z) equals to 0.9999999999999998
Before optimization
Xi upper 0.9999999999999998
Xi lower 0
counter is 1
g is inf
==== MIP Gap ==== 0.0001
Parameter MIPGap unchanged
   Value: 0.0001  Min: 0.0  Max: inf  Default: 0.0001
((1, 1), 1) 0
((1, 2), 1) 0
((1, 3), 1) 0
((1, 4), 1) 0
((1, 5), 1) 0
((1, 6), 1) 0
((1, 7), 1) 0
((1, 8), 1) 0
((1, 9), 1) 0
((2, 1), 1) 0
((2, 2), 1) 0
((2, 3), 1) 0
((2, 4), 1) 0
((2, 5), 1) 0
((2, 6), 1) 0
((2, 7), 1) 0
((2, 8), 1) 0
((2, 9), 1) 0
((3, 1), 1) 0
((3, 2), 1) 0
((3, 3), 1) 0
((3, 4), 1) 0
((3, 5), 1) 0
((3, 6), 1) 0
((3, 7), 1) 0
((3, 8), 1) 0
((3, 9), 1) 0
((4, 1), 1) 0
((4, 2), 1) 0
((4, 3), 1) 0
((4, 4), 1) 0
((4, 5), 1) 0
((4, 6), 1) 0
((4, 7), 1) 0
((4, 8), 1) 0
((4, 9), 1) 0
((5, 1), 1) 0
((5, 2), 1) 0
((5, 3), 1) 0
((5, 4), 1) 0
((5, 6), 1) 0
((5, 7), 1) 0
((5, 8), 1) 0
((5, 9), 1) 0
((6, 1), 1) 0
((6, 2), 1) 0
((6, 3), 1) 0
((6, 4), 1) 0
((6, 5), 1) 0
((6, 6), 1) 0
((6, 7), 1) 0
((6, 8), 1) 0
((6, 9), 1) 0
((7, 1), 1) 0
((7, 2), 1) 0
((7, 3), 1) 0
((7, 4), 1) 0
((7, 5), 1) 0
((7, 6), 1) 0
((7, 7), 1) 0
((7, 8), 1) 0
((7, 9), 1) 0
((8, 1), 1) 0
((8, 2), 1) 0
((8, 3), 1) 0
((8, 4), 1) 0
((8, 5), 1) 0
((8, 6), 1) 0
((8, 7), 1) 0
((8, 8), 1) 0
((8, 9), 1) 0
((9, 1), 1) 0
((9, 2), 1) 0
((9, 3), 1) 0
((9, 4), 1) 0
((9, 5), 1) 0
((9, 6), 1) 0
((9, 7), 1) 0
((9, 8), 1) 0
((9, 9), 1) 0
((1, 1), 2) 0
((1, 2), 2) 0
((1, 3), 2) 0
((1, 4), 2) 0
((1, 5), 2) 0
((1, 6), 2) 0
((1, 7), 2) 0
((1, 8), 2) 0
((1, 9), 2) 0
((2, 1), 2) 0
((2, 2), 2) 0
((2, 3), 2) 0
((2, 4), 2) 0
((2, 5), 2) 0
((2, 6), 2) 0
((2, 7), 2) 0
((2, 8), 2) 0
((2, 9), 2) 0
((3, 1), 2) 0
((3, 2), 2) 0
((3, 3), 2) 0
((3, 4), 2) 0
((3, 5), 2) 0
((3, 6), 2) 0
((3, 7), 2) 0
((3, 8), 2) 0
((3, 9), 2) 0
((4, 1), 2) 0
((4, 2), 2) 0
((4, 3), 2) 0
((4, 4), 2) 0
((4, 6), 2) 0
((4, 7), 2) 0
((4, 8), 2) 0
((4, 9), 2) 0
((5, 1), 2) 0
((5, 2), 2) 0
((5, 3), 2) 0
((5, 7), 2) 0
((5, 8), 2) 0
((5, 9), 2) 0
((6, 1), 2) 0
((6, 2), 2) 0
((6, 3), 2) 0
((6, 4), 2) 0
((6, 6), 2) 0
((6, 7), 2) 0
((6, 8), 2) 0
((6, 9), 2) 0
((7, 1), 2) 0
((7, 2), 2) 0
((7, 3), 2) 0
((7, 4), 2) 0
((7, 5), 2) 0
((7, 6), 2) 0
((7, 7), 2) 0
((7, 8), 2) 0
((7, 9), 2) 0
((8, 1), 2) 0
((8, 2), 2) 0
((8, 3), 2) 0
((8, 4), 2) 0
((8, 5), 2) 0
((8, 6), 2) 0
((8, 7), 2) 0
((8, 8), 2) 0
((8, 9), 2) 0
((9, 1), 2) 0
((9, 2), 2) 0
((9, 3), 2) 0
((9, 4), 2) 0
((9, 5), 2) 0
((9, 6), 2) 0
((9, 7), 2) 0
((9, 8), 2) 0
((9, 9), 2) 0
((1, 1), 3) 0
((1, 2), 3) 0
((1, 3), 3) 0
((1, 4), 3) 0
((1, 5), 3) 0
((1, 6), 3) 0
((1, 7), 3) 0
((1, 8), 3) 0
((1, 9), 3) 0
((2, 1), 3) 0
((2, 2), 3) 0
((2, 3), 3) 0
((2, 4), 3) 0
((2, 5), 3) 0
((2, 6), 3) 0
((2, 7), 3) 0
((2, 8), 3) 0
((2, 9), 3) 0
((3, 1), 3) 0
((3, 2), 3) 0
((3, 3), 3) 0
((3, 4), 3) 0
((3, 6), 3) 0
((3, 7), 3) 0
((3, 8), 3) 0
((3, 9), 3) 0
((4, 1), 3) 0
((4, 2), 3) 0
((4, 3), 3) 0
((4, 7), 3) 0
((4, 8), 3) 0
((4, 9), 3) 0
((5, 1), 3) 0
((5, 2), 3) 0
((5, 8), 3) 0
((5, 9), 3) 0
((6, 1), 3) 0
((6, 2), 3) 0
((6, 3), 3) 0
((6, 7), 3) 0
((6, 8), 3) 0
((6, 9), 3) 0
((7, 1), 3) 0
((7, 2), 3) 0
((7, 3), 3) 0
((7, 4), 3) 0
((7, 6), 3) 0
((7, 7), 3) 0
((7, 8), 3) 0
((7, 9), 3) 0
((8, 1), 3) 0
((8, 2), 3) 0
((8, 3), 3) 0
((8, 4), 3) 0
((8, 5), 3) 0
((8, 6), 3) 0
((8, 7), 3) 0
((8, 8), 3) 0
((8, 9), 3) 0
((9, 1), 3) 0
((9, 2), 3) 0
((9, 3), 3) 0
((9, 4), 3) 0
((9, 5), 3) 0
((9, 6), 3) 0
((9, 7), 3) 0
((9, 8), 3) 0
((9, 9), 3) 0
((1, 1), 4) 0
((1, 2), 4) 0
((1, 3), 4) 0
((1, 4), 4) 0
((1, 5), 4) 0
((1, 6), 4) 0
((1, 7), 4) 0
((1, 8), 4) 0
((1, 9), 4) 0
((2, 1), 4) 0
((2, 2), 4) 0
((2, 3), 4) 0
((2, 4), 4) 0
((2, 6), 4) 0
((2, 7), 4) 0
((2, 8), 4) 0
((2, 9), 4) 0
((3, 1), 4) 0
((3, 2), 4) 0
((3, 3), 4) 0
((3, 7), 4) 0
((3, 8), 4) 0
((3, 9), 4) 0
((4, 1), 4) 0
((4, 2), 4) 0
((4, 8), 4) 0
((4, 9), 4) 0
((5, 1), 4) 0
((5, 9), 4) 0
((6, 1), 4) 0
((6, 2), 4) 0
((6, 8), 4) 0
((6, 9), 4) 0
((7, 1), 4) 0
((7, 2), 4) 0
((7, 3), 4) 0
((7, 7), 4) 0
((7, 8), 4) 0
((7, 9), 4) 0
((8, 1), 4) 0
((8, 2), 4) 0
((8, 3), 4) 0
((8, 4), 4) 0
((8, 6), 4) 0
((8, 7), 4) 0
((8, 8), 4) 0
((8, 9), 4) 0
((9, 1), 4) 0
((9, 2), 4) 0
((9, 3), 4) 0
((9, 4), 4) 0
((9, 5), 4) 0
((9, 6), 4) 0
((9, 7), 4) 0
((9, 8), 4) 0
((9, 9), 4) 0
((1, 1), 5) 0
((1, 2), 5) 0
((1, 3), 5) 0
((1, 4), 5) 0
((1, 6), 5) 0
((1, 7), 5) 0
((1, 8), 5) 0
((1, 9), 5) 0
((2, 1), 5) 0
((2, 2), 5) 0
((2, 3), 5) 0
((2, 7), 5) 0
((2, 8), 5) 0
((2, 9), 5) 0
((3, 1), 5) 0
((3, 2), 5) 0
((3, 8), 5) 0
((3, 9), 5) 0
((4, 1), 5) 0
((4, 9), 5) 0
((6, 1), 5) 0
((6, 9), 5) 0
((7, 1), 5) 0
((7, 2), 5) 0
((7, 8), 5) 0
((7, 9), 5) 0
((8, 1), 5) 0
((8, 2), 5) 0
((8, 3), 5) 0
((8, 7), 5) 0
((8, 8), 5) 0
((8, 9), 5) 0
((9, 1), 5) 0
((9, 2), 5) 0
((9, 3), 5) 0
((9, 4), 5) 0
((9, 6), 5) 0
((9, 7), 5) 0
((9, 8), 5) 0
((9, 9), 5) 0
((1, 1), 6) 0
((1, 2), 6) 0
((1, 3), 6) 0
((1, 7), 6) 0
((1, 8), 6) 0
((1, 9), 6) 0
((2, 1), 6) 0
((2, 2), 6) 0
((2, 8), 6) 0
((2, 9), 6) 0
((3, 1), 6) 0
((3, 9), 6) 0
((7, 1), 6) 0
((7, 9), 6) 0
((8, 1), 6) 0
((8, 2), 6) 0
((8, 8), 6) 0
((8, 9), 6) 0
((9, 1), 6) 0
((9, 2), 6) 0
((9, 3), 6) 0
((9, 7), 6) 0
((9, 8), 6) 0
((9, 9), 6) 0
((1, 1), 7) 0
((1, 2), 7) 0
((1, 8), 7) 0
((1, 9), 7) 0
((2, 1), 7) 0
((2, 9), 7) 0
((8, 1), 7) 0
((8, 9), 7) 0
((9, 1), 7) 0
((9, 2), 7) 0
((9, 8), 7) 0
((9, 9), 7) 0
((1, 1), 8) 0
((1, 9), 8) 0
((9, 1), 8) 0
((9, 9), 8) 0
Gurobi Optimizer version 9.1.2 build v9.1.2rc0 (linux64)
Thread count: 6 physical cores, 12 logical processors, using up to 1 threads
Optimize a model with 816 rows, 65775 columns and 7327 nonzeros
Model fingerprint: 0x24b5d525
Variable types: 10 continuous, 65765 integer (0 binary)
Coefficient statistics:
  Matrix range     [7e-07, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [3e+00, 3e+00]
  RHS range        [1e+00, 3e+00]

Warning: Completing partial solution with 65610 unfixed non-continuous variables out of 65765
User MIP start produced solution with objective 1 (0.02s)
Loaded user MIP start with objective 1

Presolve removed 816 rows and 65775 columns
Presolve time: 0.01s
Presolve: All rows and columns removed

Explored 0 nodes (0 simplex iterations) in 0.03 seconds
Thread count was 1 (of 12 available processors)

Solution count 2: 0.325477 1 

Optimal solution found (tolerance 1.00e-04)
Best objective 3.254768320000e-01, best bound 3.254768320000e-01, gap 0.0000%
========== Z_wt ==========
((1, 5), 5) -0.0
((2, 4), 5) -0.0
((2, 5), 5) -0.0
((3, 3), 5) -0.0
((3, 4), 5) -0.0
((4, 2), 5) -0.0
((4, 3), 5) 3.0
((5, 1), 5) -0.0
((5, 2), 5) -0.0
((1, 4), 6) -0.0
((1, 5), 6) -0.0
((1, 6), 6) -0.0
((2, 3), 6) -0.0
((2, 4), 6) -0.0
((2, 5), 6) -0.0
((2, 6), 6) -0.0
((3, 2), 6) -0.0
((3, 3), 6) -0.0
((3, 4), 6) -0.0
((3, 5), 6) -0.0
((4, 1), 6) -0.0
((4, 2), 6) -0.0
((4, 3), 6) -0.0
((4, 4), 6) 3.0
((5, 1), 6) -0.0
((5, 2), 6) -0.0
((5, 3), 6) -0.0
((6, 1), 6) -0.0
((6, 2), 6) -0.0
((1, 3), 7) -0.0
((1, 4), 7) -0.0
((1, 5), 7) -0.0
((1, 6), 7) -0.0
((1, 7), 7) -0.0
((2, 2), 7) -0.0
((2, 3), 7) -0.0
((2, 4), 7) -0.0
((2, 5), 7) -0.0
((2, 6), 7) -0.0
((2, 7), 7) -0.0
((3, 1), 7) -0.0
((3, 2), 7) -0.0
((3, 3), 7) -0.0
((3, 4), 7) -0.0
((3, 5), 7) -0.0
((3, 6), 7) -0.0
((4, 1), 7) -0.0
((4, 2), 7) -0.0
((4, 3), 7) -0.0
((4, 4), 7) -0.0
((4, 5), 7) -0.0
((5, 1), 7) -0.0
((5, 2), 7) -0.0
((5, 3), 7) -0.0
((5, 4), 7) 3.0
((6, 1), 7) -0.0
((6, 2), 7) -0.0
((6, 3), 7) -0.0
((7, 1), 7) -0.0
((7, 2), 7) -0.0
((1, 2), 8) -0.0
((1, 3), 8) -0.0
((1, 4), 8) -0.0
((1, 5), 8) -0.0
((1, 6), 8) -0.0
((1, 7), 8) -0.0
((1, 8), 8) -0.0
((2, 1), 8) -0.0
((2, 2), 8) -0.0
((2, 3), 8) -0.0
((2, 4), 8) -0.0
((2, 5), 8) -0.0
((2, 6), 8) -0.0
((2, 7), 8) -0.0
((2, 8), 8) -0.0
((3, 1), 8) -0.0
((3, 2), 8) -0.0
((3, 3), 8) -0.0
((3, 4), 8) -0.0
((3, 5), 8) -0.0
((3, 6), 8) -0.0
((3, 7), 8) -0.0
((4, 1), 8) -0.0
((4, 2), 8) -0.0
((4, 3), 8) -0.0
((4, 4), 8) -0.0
((4, 5), 8) -0.0
((4, 6), 8) -0.0
((5, 1), 8) -0.0
((5, 2), 8) -0.0
((5, 3), 8) -0.0
((5, 4), 8) -0.0
((5, 5), 8) 3.0
((6, 1), 8) -0.0
((6, 2), 8) -0.0
((6, 3), 8) -0.0
((6, 4), 8) -0.0
((7, 1), 8) -0.0
((7, 2), 8) -0.0
((7, 3), 8) -0.0
((8, 1), 8) -0.0
((8, 2), 8) -0.0
((1, 1), 9) -0.0
((1, 2), 9) -0.0
((1, 3), 9) -0.0
((1, 4), 9) -0.0
((1, 5), 9) -0.0
((1, 6), 9) -0.0
((1, 7), 9) -0.0
((1, 8), 9) -0.0
((1, 9), 9) -0.0
((2, 1), 9) -0.0
((2, 2), 9) -0.0
((2, 3), 9) -0.0
((2, 4), 9) -0.0
((2, 5), 9) -0.0
((2, 6), 9) -0.0
((2, 7), 9) -0.0
((2, 8), 9) -0.0
((2, 9), 9) -0.0
((3, 1), 9) -0.0
((3, 2), 9) -0.0
((3, 3), 9) -0.0
((3, 4), 9) -0.0
((3, 5), 9) -0.0
((3, 6), 9) -0.0
((3, 7), 9) -0.0
((3, 8), 9) -0.0
((4, 1), 9) -0.0
((4, 2), 9) -0.0
((4, 3), 9) -0.0
((4, 4), 9) -0.0
((4, 5), 9) -0.0
((4, 6), 9) -0.0
((4, 7), 9) -0.0
((5, 1), 9) -0.0
((5, 2), 9) -0.0
((5, 3), 9) -0.0
((5, 4), 9) -0.0
((5, 5), 9) 3.0
((5, 6), 9) -0.0
((6, 1), 9) -0.0
((6, 2), 9) -0.0
((6, 3), 9) -0.0
((6, 4), 9) -0.0
((6, 5), 9) -0.0
((7, 1), 9) -0.0
((7, 2), 9) -0.0
((7, 3), 9) -0.0
((7, 4), 9) -0.0
((8, 1), 9) -0.0
((8, 2), 9) -0.0
((8, 3), 9) -0.0
((9, 1), 9) -0.0
((9, 2), 9) -0.0
========== Z_wt hat ======
((1, 5), 5) 0
((2, 4), 5) 0
((2, 5), 5) 0
((3, 3), 5) 0
((3, 4), 5) 0
((4, 2), 5) 0
((4, 3), 5) 0
((5, 1), 5) 0
((5, 2), 5) 0
((1, 4), 6) 0
((1, 5), 6) 0
((1, 6), 6) 0
((2, 3), 6) 0
((2, 4), 6) 0
((2, 5), 6) 0
((2, 6), 6) 0
((3, 2), 6) 0
((3, 3), 6) 0
((3, 4), 6) 0
((3, 5), 6) 0
((4, 1), 6) 0
((4, 2), 6) 0
((4, 3), 6) 0
((4, 4), 6) 0
((5, 1), 6) 0
((5, 2), 6) 0
((5, 3), 6) 0
((6, 1), 6) 0
((6, 2), 6) 0
((1, 3), 7) 0
((1, 4), 7) 0
((1, 5), 7) 0
((1, 6), 7) 0
((1, 7), 7) 0
((2, 2), 7) 0
((2, 3), 7) 0
((2, 4), 7) 0
((2, 5), 7) 0
((2, 6), 7) 0
((2, 7), 7) 0
((3, 1), 7) 0
((3, 2), 7) 0
((3, 3), 7) 0
((3, 4), 7) 0
((3, 5), 7) 0
((3, 6), 7) 0
((4, 1), 7) 0
((4, 2), 7) 0
((4, 3), 7) 0
((4, 4), 7) 0
((4, 5), 7) 0
((5, 1), 7) 0
((5, 2), 7) 0
((5, 3), 7) 0
((5, 4), 7) 0
((6, 1), 7) 0
((6, 2), 7) 0
((6, 3), 7) 0
((7, 1), 7) 0
((7, 2), 7) 0
((1, 2), 8) 0
((1, 3), 8) 0
((1, 4), 8) 0
((1, 5), 8) 0
((1, 6), 8) 0
((1, 7), 8) 0
((1, 8), 8) 0
((2, 1), 8) 0
((2, 2), 8) 0
((2, 3), 8) 0
((2, 4), 8) 0
((2, 5), 8) 0
((2, 6), 8) 0
((2, 7), 8) 0
((2, 8), 8) 0
((3, 1), 8) 0
((3, 2), 8) 0
((3, 3), 8) 0
((3, 4), 8) 0
((3, 5), 8) 0
((3, 6), 8) 0
((3, 7), 8) 0
((4, 1), 8) 0
((4, 2), 8) 0
((4, 3), 8) 0
((4, 4), 8) 0
((4, 5), 8) 0
((4, 6), 8) 0
((5, 1), 8) 0
((5, 2), 8) 0
((5, 3), 8) 0
((5, 4), 8) 0
((5, 5), 8) 0
((6, 1), 8) 0
((6, 2), 8) 0
((6, 3), 8) 0
((6, 4), 8) 0
((7, 1), 8) 0
((7, 2), 8) 0
((7, 3), 8) 0
((8, 1), 8) 0
((8, 2), 8) 0
((1, 1), 9) 0
((1, 2), 9) 0
((1, 3), 9) 0
((1, 4), 9) 0
((1, 5), 9) 0
((1, 6), 9) 0
((1, 7), 9) 0
((1, 8), 9) 0
((1, 9), 9) 0
((2, 1), 9) 0
((2, 2), 9) 0
((2, 3), 9) 0
((2, 4), 9) 0
((2, 5), 9) 0
((2, 6), 9) 0
((2, 7), 9) 0
((2, 8), 9) 0
((2, 9), 9) 0
((3, 1), 9) 0
((3, 2), 9) 0
((3, 3), 9) 0
((3, 4), 9) 0
((3, 5), 9) 0
((3, 6), 9) 0
((3, 7), 9) 0
((3, 8), 9) 0
((4, 1), 9) 0
((4, 2), 9) 0
((4, 3), 9) 0
((4, 4), 9) 0
((4, 5), 9) 0
((4, 6), 9) 0
((4, 7), 9) 0
((5, 1), 9) 0
((5, 2), 9) 0
((5, 3), 9) 0
((5, 4), 9) 0
((5, 5), 9) 0
((5, 6), 9) 0
((6, 1), 9) 0
((6, 2), 9) 0
((6, 3), 9) 0
((6, 4), 9) 0
((6, 5), 9) 0
((7, 1), 9) 0
((7, 2), 9) 0
((7, 3), 9) 0
((7, 4), 9) 0
((8, 1), 9) 0
((8, 2), 9) 0
((8, 3), 9) 0
((9, 1), 9) 0
((9, 2), 9) 0
Pi result after optimization
Xi iter upper 0.3254768319999997
Xi iter lower 0.3254768319999997
====== recalculated Z_ct ======
(1, 1) 1 3.0
(1, 1) 2 3.0
(1, 1) 3 3.0
(1, 1) 4 3.0
(1, 1) 5 3.0
(1, 1) 6 3.0
(1, 1) 7 3.0
(1, 1) 8 3.0
(1, 1) 9 3.0
===== lhs from recalculated Z_ct ===== 0.9999979448888887
===== ZZZ value is ((4, 3), 5) 3.0
===== ZZZ value is ((4, 4), 6) 3.0
===== ZZZ value is ((5, 4), 7) 3.0
===== ZZZ value is ((5, 5), 8) 3.0
===== ZZZ value is ((5, 5), 9) 3.0
===== recalculated Z_ct is (1, 1) 1 3.0
===== recalculated Z_ct is (1, 1) 2 3.0
===== recalculated Z_ct is (1, 1) 3 3.0
===== recalculated Z_ct is (1, 1) 4 3.0
===== recalculated Z_ct is (1, 1) 5 3.0
===== recalculated Z_ct is (1, 1) 6 3.0
===== recalculated Z_ct is (1, 1) 7 3.0
===== recalculated Z_ct is (1, 1) 8 3.0
===== recalculated Z_ct is (1, 1) 9 3.0
After optimization
Xi upper 0.9999999999999998
Xi lower 0.3254768319999997
f(Z) equals to 0.999998931342222
Before optimization
Xi upper 0.999998931342222
Xi lower 0.3254768319999997
counter is 2
g is 2.0724120214560244
==== MIP Gap ==== 0.0001
Parameter MIPGap unchanged
   Value: 0.0001  Min: 0.0  Max: inf  Default: 0.0001
((1, 1), 1) 0
((1, 2), 1) 0
((1, 3), 1) 0
((1, 4), 1) 0
((1, 5), 1) 0
((1, 6), 1) 0
((1, 7), 1) 0
((1, 8), 1) 0
((1, 9), 1) 0
((2, 1), 1) 0
((2, 2), 1) 0
((2, 3), 1) 0
((2, 4), 1) 0
((2, 5), 1) 0
((2, 6), 1) 0
((2, 7), 1) 0
((2, 8), 1) 0
((2, 9), 1) 0
((3, 1), 1) 0
((3, 2), 1) 0
((3, 3), 1) 0
((3, 4), 1) 0
((3, 5), 1) 0
((3, 6), 1) 0
((3, 7), 1) 0
((3, 8), 1) 0
((3, 9), 1) 0
((4, 1), 1) 0
((4, 2), 1) 0
((4, 3), 1) 0
((4, 4), 1) 0
((4, 5), 1) 0
((4, 6), 1) 0
((4, 7), 1) 0
((4, 8), 1) 0
((4, 9), 1) 0
((5, 1), 1) 0
((5, 2), 1) 0
((5, 3), 1) 0
((5, 4), 1) 0
((5, 6), 1) 0
((5, 7), 1) 0
((5, 8), 1) 0
((5, 9), 1) 0
((6, 1), 1) 0
((6, 2), 1) 0
((6, 3), 1) 0
((6, 4), 1) 0
((6, 5), 1) 0
((6, 6), 1) 0
((6, 7), 1) 0
((6, 8), 1) 0
((6, 9), 1) 0
((7, 1), 1) 0
((7, 2), 1) 0
((7, 3), 1) 0
((7, 4), 1) 0
((7, 5), 1) 0
((7, 6), 1) 0
((7, 7), 1) 0
((7, 8), 1) 0
((7, 9), 1) 0
((8, 1), 1) 0
((8, 2), 1) 0
((8, 3), 1) 0
((8, 4), 1) 0
((8, 5), 1) 0
((8, 6), 1) 0
((8, 7), 1) 0
((8, 8), 1) 0
((8, 9), 1) 0
((9, 1), 1) 0
((9, 2), 1) 0
((9, 3), 1) 0
((9, 4), 1) 0
((9, 5), 1) 0
((9, 6), 1) 0
((9, 7), 1) 0
((9, 8), 1) 0
((9, 9), 1) 0
((1, 1), 2) 0
((1, 2), 2) 0
((1, 3), 2) 0
((1, 4), 2) 0
((1, 5), 2) 0
((1, 6), 2) 0
((1, 7), 2) 0
((1, 8), 2) 0
((1, 9), 2) 0
((2, 1), 2) 0
((2, 2), 2) 0
((2, 3), 2) 0
((2, 4), 2) 0
((2, 5), 2) 0
((2, 6), 2) 0
((2, 7), 2) 0
((2, 8), 2) 0
((2, 9), 2) 0
((3, 1), 2) 0
((3, 2), 2) 0
((3, 3), 2) 0
((3, 4), 2) 0
((3, 5), 2) 0
((3, 6), 2) 0
((3, 7), 2) 0
((3, 8), 2) 0
((3, 9), 2) 0
((4, 1), 2) 0
((4, 2), 2) 0
((4, 3), 2) 0
((4, 4), 2) 0
((4, 6), 2) 0
((4, 7), 2) 0
((4, 8), 2) 0
((4, 9), 2) 0
((5, 1), 2) 0
((5, 2), 2) 0
((5, 3), 2) 0
((5, 7), 2) 0
((5, 8), 2) 0
((5, 9), 2) 0
((6, 1), 2) 0
((6, 2), 2) 0
((6, 3), 2) 0
((6, 4), 2) 0
((6, 6), 2) 0
((6, 7), 2) 0
((6, 8), 2) 0
((6, 9), 2) 0
((7, 1), 2) 0
((7, 2), 2) 0
((7, 3), 2) 0
((7, 4), 2) 0
((7, 5), 2) 0
((7, 6), 2) 0
((7, 7), 2) 0
((7, 8), 2) 0
((7, 9), 2) 0
((8, 1), 2) 0
((8, 2), 2) 0
((8, 3), 2) 0
((8, 4), 2) 0
((8, 5), 2) 0
((8, 6), 2) 0
((8, 7), 2) 0
((8, 8), 2) 0
((8, 9), 2) 0
((9, 1), 2) 0
((9, 2), 2) 0
((9, 3), 2) 0
((9, 4), 2) 0
((9, 5), 2) 0
((9, 6), 2) 0
((9, 7), 2) 0
((9, 8), 2) 0
((9, 9), 2) 0
((1, 1), 3) 0
((1, 2), 3) 0
((1, 3), 3) 0
((1, 4), 3) 0
((1, 5), 3) 0
((1, 6), 3) 0
((1, 7), 3) 0
((1, 8), 3) 0
((1, 9), 3) 0
((2, 1), 3) 0
((2, 2), 3) 0
((2, 3), 3) 0
((2, 4), 3) 0
((2, 5), 3) 0
((2, 6), 3) 0
((2, 7), 3) 0
((2, 8), 3) 0
((2, 9), 3) 0
((3, 1), 3) 0
((3, 2), 3) 0
((3, 3), 3) 0
((3, 4), 3) 0
((3, 6), 3) 0
((3, 7), 3) 0
((3, 8), 3) 0
((3, 9), 3) 0
((4, 1), 3) 0
((4, 2), 3) 0
((4, 3), 3) 0
((4, 7), 3) 0
((4, 8), 3) 0
((4, 9), 3) 0
((5, 1), 3) 0
((5, 2), 3) 0
((5, 8), 3) 0
((5, 9), 3) 0
((6, 1), 3) 0
((6, 2), 3) 0
((6, 3), 3) 0
((6, 7), 3) 0
((6, 8), 3) 0
((6, 9), 3) 0
((7, 1), 3) 0
((7, 2), 3) 0
((7, 3), 3) 0
((7, 4), 3) 0
((7, 6), 3) 0
((7, 7), 3) 0
((7, 8), 3) 0
((7, 9), 3) 0
((8, 1), 3) 0
((8, 2), 3) 0
((8, 3), 3) 0
((8, 4), 3) 0
((8, 5), 3) 0
((8, 6), 3) 0
((8, 7), 3) 0
((8, 8), 3) 0
((8, 9), 3) 0
((9, 1), 3) 0
((9, 2), 3) 0
((9, 3), 3) 0
((9, 4), 3) 0
((9, 5), 3) 0
((9, 6), 3) 0
((9, 7), 3) 0
((9, 8), 3) 0
((9, 9), 3) 0
((1, 1), 4) 0
((1, 2), 4) 0
((1, 3), 4) 0
((1, 4), 4) 0
((1, 5), 4) 0
((1, 6), 4) 0
((1, 7), 4) 0
((1, 8), 4) 0
((1, 9), 4) 0
((2, 1), 4) 0
((2, 2), 4) 0
((2, 3), 4) 0
((2, 4), 4) 0
((2, 6), 4) 0
((2, 7), 4) 0
((2, 8), 4) 0
((2, 9), 4) 0
((3, 1), 4) 0
((3, 2), 4) 0
((3, 3), 4) 0
((3, 7), 4) 0
((3, 8), 4) 0
((3, 9), 4) 0
((4, 1), 4) 0
((4, 2), 4) 0
((4, 8), 4) 0
((4, 9), 4) 0
((5, 1), 4) 0
((5, 9), 4) 0
((6, 1), 4) 0
((6, 2), 4) 0
((6, 8), 4) 0
((6, 9), 4) 0
((7, 1), 4) 0
((7, 2), 4) 0
((7, 3), 4) 0
((7, 7), 4) 0
((7, 8), 4) 0
((7, 9), 4) 0
((8, 1), 4) 0
((8, 2), 4) 0
((8, 3), 4) 0
((8, 4), 4) 0
((8, 6), 4) 0
((8, 7), 4) 0
((8, 8), 4) 0
((8, 9), 4) 0
((9, 1), 4) 0
((9, 2), 4) 0
((9, 3), 4) 0
((9, 4), 4) 0
((9, 5), 4) 0
((9, 6), 4) 0
((9, 7), 4) 0
((9, 8), 4) 0
((9, 9), 4) 0
((1, 1), 5) 0
((1, 2), 5) 0
((1, 3), 5) 0
((1, 4), 5) 0
((1, 6), 5) 0
((1, 7), 5) 0
((1, 8), 5) 0
((1, 9), 5) 0
((2, 1), 5) 0
((2, 2), 5) 0
((2, 3), 5) 0
((2, 7), 5) 0
((2, 8), 5) 0
((2, 9), 5) 0
((3, 1), 5) 0
((3, 2), 5) 0
((3, 8), 5) 0
((3, 9), 5) 0
((4, 1), 5) 0
((4, 9), 5) 0
((6, 1), 5) 0
((6, 9), 5) 0
((7, 1), 5) 0
((7, 2), 5) 0
((7, 8), 5) 0
((7, 9), 5) 0
((8, 1), 5) 0
((8, 2), 5) 0
((8, 3), 5) 0
((8, 7), 5) 0
((8, 8), 5) 0
((8, 9), 5) 0
((9, 1), 5) 0
((9, 2), 5) 0
((9, 3), 5) 0
((9, 4), 5) 0
((9, 6), 5) 0
((9, 7), 5) 0
((9, 8), 5) 0
((9, 9), 5) 0
((1, 1), 6) 0
((1, 2), 6) 0
((1, 3), 6) 0
((1, 7), 6) 0
((1, 8), 6) 0
((1, 9), 6) 0
((2, 1), 6) 0
((2, 2), 6) 0
((2, 8), 6) 0
((2, 9), 6) 0
((3, 1), 6) 0
((3, 9), 6) 0
((7, 1), 6) 0
((7, 9), 6) 0
((8, 1), 6) 0
((8, 2), 6) 0
((8, 8), 6) 0
((8, 9), 6) 0
((9, 1), 6) 0
((9, 2), 6) 0
((9, 3), 6) 0
((9, 7), 6) 0
((9, 8), 6) 0
((9, 9), 6) 0
((1, 1), 7) 0
((1, 2), 7) 0
((1, 8), 7) 0
((1, 9), 7) 0
((2, 1), 7) 0
((2, 9), 7) 0
((8, 1), 7) 0
((8, 9), 7) 0
((9, 1), 7) 0
((9, 2), 7) 0
((9, 8), 7) 0
((9, 9), 7) 0
((1, 1), 8) 0
((1, 9), 8) 0
((9, 1), 8) 0
((9, 9), 8) 0
Gurobi Optimizer version 9.1.2 build v9.1.2rc0 (linux64)
Thread count: 6 physical cores, 12 logical processors, using up to 1 threads
Optimize a model with 817 rows, 65775 columns and 7483 nonzeros
Model fingerprint: 0x1f987622
Variable types: 10 continuous, 65765 integer (0 binary)
Coefficient statistics:
  Matrix range     [4e-08, 1e+00]
  Objective range  [1e+00, 1e+00]
  Bounds range     [3e+00, 3e+00]
  RHS range        [1e+00, 3e+00]

Warning: Completing partial solution with 65610 unfixed non-continuous variables out of 65765
User MIP start produced solution with objective 1.67452 (0.01s)
Loaded user MIP start with objective 1.67452
MIP start from previous solve produced solution with objective 0.999999 (0.02s)
Loaded MIP start from previous solve with objective 0.999999

Presolve removed 817 rows and 65775 columns
Presolve time: 0.01s
Presolve: All rows and columns removed

Explored 0 nodes (0 simplex iterations) in 0.03 seconds
Thread count was 1 (of 12 available processors)

Solution count 2: 0.999999 1.67452 

Optimal solution found (tolerance 1.00e-04)
Best objective 9.999989313422e-01, best bound 9.999989313422e-01, gap 0.0000%
========== Z_wt ==========
((1, 5), 5) -0.0
((2, 4), 5) -0.0
((2, 5), 5) -0.0
((3, 3), 5) -0.0
((3, 4), 5) -0.0
((4, 2), 5) -0.0
((4, 3), 5) 3.0
((5, 1), 5) -0.0
((5, 2), 5) -0.0
((1, 4), 6) -0.0
((1, 5), 6) -0.0
((1, 6), 6) -0.0
((2, 3), 6) -0.0
((2, 4), 6) -0.0
((2, 5), 6) -0.0
((2, 6), 6) -0.0
((3, 2), 6) -0.0
((3, 3), 6) -0.0
((3, 4), 6) -0.0
((3, 5), 6) -0.0
((4, 1), 6) -0.0
((4, 2), 6) -0.0
((4, 3), 6) -0.0
((4, 4), 6) 3.0
((5, 1), 6) -0.0
((5, 2), 6) -0.0
((5, 3), 6) -0.0
((6, 1), 6) -0.0
((6, 2), 6) -0.0
((1, 3), 7) -0.0
((1, 4), 7) -0.0
((1, 5), 7) -0.0
((1, 6), 7) -0.0
((1, 7), 7) -0.0
((2, 2), 7) -0.0
((2, 3), 7) -0.0
((2, 4), 7) -0.0
((2, 5), 7) -0.0
((2, 6), 7) -0.0
((2, 7), 7) -0.0
((3, 1), 7) -0.0
((3, 2), 7) -0.0
((3, 3), 7) -0.0
((3, 4), 7) -0.0
((3, 5), 7) -0.0
((3, 6), 7) -0.0
((4, 1), 7) -0.0
((4, 2), 7) -0.0
((4, 3), 7) -0.0
((4, 4), 7) -0.0
((4, 5), 7) -0.0
((5, 1), 7) -0.0
((5, 2), 7) -0.0
((5, 3), 7) -0.0
((5, 4), 7) 3.0
((6, 1), 7) -0.0
((6, 2), 7) -0.0
((6, 3), 7) -0.0
((7, 1), 7) -0.0
((7, 2), 7) -0.0
((1, 2), 8) -0.0
((1, 3), 8) -0.0
((1, 4), 8) -0.0
((1, 5), 8) -0.0
((1, 6), 8) -0.0
((1, 7), 8) -0.0
((1, 8), 8) -0.0
((2, 1), 8) -0.0
((2, 2), 8) -0.0
((2, 3), 8) -0.0
((2, 4), 8) -0.0
((2, 5), 8) -0.0
((2, 6), 8) -0.0
((2, 7), 8) -0.0
((2, 8), 8) -0.0
((3, 1), 8) -0.0
((3, 2), 8) -0.0
((3, 3), 8) -0.0
((3, 4), 8) -0.0
((3, 5), 8) -0.0
((3, 6), 8) -0.0
((3, 7), 8) -0.0
((4, 1), 8) -0.0
((4, 2), 8) -0.0
((4, 3), 8) -0.0
((4, 4), 8) -0.0
((4, 5), 8) -0.0
((4, 6), 8) -0.0
((5, 1), 8) -0.0
((5, 2), 8) -0.0
((5, 3), 8) -0.0
((5, 4), 8) -0.0
((5, 5), 8) 3.0
((6, 1), 8) -0.0
((6, 2), 8) -0.0
((6, 3), 8) -0.0
((6, 4), 8) -0.0
((7, 1), 8) -0.0
((7, 2), 8) -0.0
((7, 3), 8) -0.0
((8, 1), 8) -0.0
((8, 2), 8) -0.0
((1, 1), 9) -0.0
((1, 2), 9) -0.0
((1, 3), 9) -0.0
((1, 4), 9) -0.0
((1, 5), 9) -0.0
((1, 6), 9) -0.0
((1, 7), 9) -0.0
((1, 8), 9) -0.0
((1, 9), 9) -0.0
((2, 1), 9) -0.0
((2, 2), 9) -0.0
((2, 3), 9) -0.0
((2, 4), 9) -0.0
((2, 5), 9) -0.0
((2, 6), 9) -0.0
((2, 7), 9) -0.0
((2, 8), 9) -0.0
((2, 9), 9) -0.0
((3, 1), 9) -0.0
((3, 2), 9) -0.0
((3, 3), 9) -0.0
((3, 4), 9) -0.0
((3, 5), 9) -0.0
((3, 6), 9) -0.0
((3, 7), 9) -0.0
((3, 8), 9) -0.0
((4, 1), 9) -0.0
((4, 2), 9) -0.0
((4, 3), 9) -0.0
((4, 4), 9) -0.0
((4, 5), 9) -0.0
((4, 6), 9) -0.0
((4, 7), 9) -0.0
((5, 1), 9) -0.0
((5, 2), 9) -0.0
((5, 3), 9) -0.0
((5, 4), 9) -0.0
((5, 5), 9) 3.0
((5, 6), 9) -0.0
((6, 1), 9) -0.0
((6, 2), 9) -0.0
((6, 3), 9) -0.0
((6, 4), 9) -0.0
((6, 5), 9) -0.0
((7, 1), 9) -0.0
((7, 2), 9) -0.0
((7, 3), 9) -0.0
((7, 4), 9) -0.0
((8, 1), 9) -0.0
((8, 2), 9) -0.0
((8, 3), 9) -0.0
((9, 1), 9) -0.0
((9, 2), 9) -0.0
========== Z_wt hat ======
((1, 5), 5) -0.0
((2, 4), 5) -0.0
((2, 5), 5) -0.0
((3, 3), 5) -0.0
((3, 4), 5) -0.0
((4, 2), 5) -0.0
((4, 3), 5) 3.0
((5, 1), 5) -0.0
((5, 2), 5) -0.0
((1, 4), 6) -0.0
((1, 5), 6) -0.0
((1, 6), 6) -0.0
((2, 3), 6) -0.0
((2, 4), 6) -0.0
((2, 5), 6) -0.0
((2, 6), 6) -0.0
((3, 2), 6) -0.0
((3, 3), 6) -0.0
((3, 4), 6) -0.0
((3, 5), 6) -0.0
((4, 1), 6) -0.0
((4, 2), 6) -0.0
((4, 3), 6) -0.0
((4, 4), 6) 3.0
((5, 1), 6) -0.0
((5, 2), 6) -0.0
((5, 3), 6) -0.0
((6, 1), 6) -0.0
((6, 2), 6) -0.0
((1, 3), 7) -0.0
((1, 4), 7) -0.0
((1, 5), 7) -0.0
((1, 6), 7) -0.0
((1, 7), 7) -0.0
((2, 2), 7) -0.0
((2, 3), 7) -0.0
((2, 4), 7) -0.0
((2, 5), 7) -0.0
((2, 6), 7) -0.0
((2, 7), 7) -0.0
((3, 1), 7) -0.0
((3, 2), 7) -0.0
((3, 3), 7) -0.0
((3, 4), 7) -0.0
((3, 5), 7) -0.0
((3, 6), 7) -0.0
((4, 1), 7) -0.0
((4, 2), 7) -0.0
((4, 3), 7) -0.0
((4, 4), 7) -0.0
((4, 5), 7) -0.0
((5, 1), 7) -0.0
((5, 2), 7) -0.0
((5, 3), 7) -0.0
((5, 4), 7) 3.0
((6, 1), 7) -0.0
((6, 2), 7) -0.0
((6, 3), 7) -0.0
((7, 1), 7) -0.0
((7, 2), 7) -0.0
((1, 2), 8) -0.0
((1, 3), 8) -0.0
((1, 4), 8) -0.0
((1, 5), 8) -0.0
((1, 6), 8) -0.0
((1, 7), 8) -0.0
((1, 8), 8) -0.0
((2, 1), 8) -0.0
((2, 2), 8) -0.0
((2, 3), 8) -0.0
((2, 4), 8) -0.0
((2, 5), 8) -0.0
((2, 6), 8) -0.0
((2, 7), 8) -0.0
((2, 8), 8) -0.0
((3, 1), 8) -0.0
((3, 2), 8) -0.0
((3, 3), 8) -0.0
((3, 4), 8) -0.0
((3, 5), 8) -0.0
((3, 6), 8) -0.0
((3, 7), 8) -0.0
((4, 1), 8) -0.0
((4, 2), 8) -0.0
((4, 3), 8) -0.0
((4, 4), 8) -0.0
((4, 5), 8) -0.0
((4, 6), 8) -0.0
((5, 1), 8) -0.0
((5, 2), 8) -0.0
((5, 3), 8) -0.0
((5, 4), 8) -0.0
((5, 5), 8) 3.0
((6, 1), 8) -0.0
((6, 2), 8) -0.0
((6, 3), 8) -0.0
((6, 4), 8) -0.0
((7, 1), 8) -0.0
((7, 2), 8) -0.0
((7, 3), 8) -0.0
((8, 1), 8) -0.0
((8, 2), 8) -0.0
((1, 1), 9) -0.0
((1, 2), 9) -0.0
((1, 3), 9) -0.0
((1, 4), 9) -0.0
((1, 5), 9) -0.0
((1, 6), 9) -0.0
((1, 7), 9) -0.0
((1, 8), 9) -0.0
((1, 9), 9) -0.0
((2, 1), 9) -0.0
((2, 2), 9) -0.0
((2, 3), 9) -0.0
((2, 4), 9) -0.0
((2, 5), 9) -0.0
((2, 6), 9) -0.0
((2, 7), 9) -0.0
((2, 8), 9) -0.0
((2, 9), 9) -0.0
((3, 1), 9) -0.0
((3, 2), 9) -0.0
((3, 3), 9) -0.0
((3, 4), 9) -0.0
((3, 5), 9) -0.0
((3, 6), 9) -0.0
((3, 7), 9) -0.0
((3, 8), 9) -0.0
((4, 1), 9) -0.0
((4, 2), 9) -0.0
((4, 3), 9) -0.0
((4, 4), 9) -0.0
((4, 5), 9) -0.0
((4, 6), 9) -0.0
((4, 7), 9) -0.0
((5, 1), 9) -0.0
((5, 2), 9) -0.0
((5, 3), 9) -0.0
((5, 4), 9) -0.0
((5, 5), 9) 3.0
((5, 6), 9) -0.0
((6, 1), 9) -0.0
((6, 2), 9) -0.0
((6, 3), 9) -0.0
((6, 4), 9) -0.0
((6, 5), 9) -0.0
((7, 1), 9) -0.0
((7, 2), 9) -0.0
((7, 3), 9) -0.0
((7, 4), 9) -0.0
((8, 1), 9) -0.0
((8, 2), 9) -0.0
((8, 3), 9) -0.0
((9, 1), 9) -0.0
((9, 2), 9) -0.0
Pi result after optimization
Xi iter upper 0.9999989313422222
Xi iter lower 0.999998931342222
====== recalculated Z_ct ======
(1, 1) 1 3.0
(1, 1) 2 3.0
(1, 1) 3 3.0
(1, 1) 4 3.0
(1, 1) 5 3.0
(1, 1) 6 3.0
(1, 1) 7 3.0
(1, 1) 8 3.0
(1, 1) 9 3.0
===== lhs from recalculated Z_ct ===== 0.999998931342222
===== ZZZ value is ((4, 3), 5) 3.0
===== ZZZ value is ((4, 4), 6) 3.0
===== ZZZ value is ((5, 4), 7) 3.0
===== ZZZ value is ((5, 5), 8) 3.0
===== ZZZ value is ((5, 5), 9) 3.0
===== recalculated Z_ct is (1, 1) 1 3.0
===== recalculated Z_ct is (1, 1) 2 3.0
===== recalculated Z_ct is (1, 1) 3 3.0
===== recalculated Z_ct is (1, 1) 4 3.0
===== recalculated Z_ct is (1, 1) 5 3.0
===== recalculated Z_ct is (1, 1) 6 3.0
===== recalculated Z_ct is (1, 1) 7 3.0
===== recalculated Z_ct is (1, 1) 8 3.0
===== recalculated Z_ct is (1, 1) 9 3.0
After optimization
Xi upper 0.999998931342222
Xi lower 0.999998931342222
Final MIPGap is 0.0
Running time is 0.6529912948608398
